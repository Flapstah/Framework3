Tracing
	Could store callstack address of function in the trace macro?  Might help with debugging..?
		Requires being able to grab the callstack

Unit tests
	probably can do nicer comparisons of strings in cvar tests now that we're using std::string
	Need to add custom log unit test
	Make unit test exe delete/create results file so that the main executable will fail to build if the unit tests fail

Logs
	Once engine lifecycle management is in place, can register log level as debug cvar
	Log to file still needs implementing

Engine
	Need init/tick/shutdown lifecycle

File system
	Need file system abstraction to control the number of open files (use boost::filesystem under the hood)

File organisation
	Need to move files around and namespace them so they're better organised
		Common
			itime.h
			itime.inl
		Engine
			everything not listed below
		System
			commandline.h
			commandline.cpp
			console.h
			console.cpp
			log.h
			log.inl
			log.cpp
		Time
			time.h
			time.cpp
			timer.h
			timer.cpp
			timevalue.cpp
		Utility
			debug.h
			debug.cpp
			compiletimestringhash.h
			runtimestringhash.h
	This should lend itself to a common interface structure such that the various components can be made into libs or dlls more easily

Solved:
	Logs no longer being elided from code when in release builds - why?
		To do with not being able to determine the value of log_level as a constant at runtime
			Release builds now expose log_level as a static constant in log.h
